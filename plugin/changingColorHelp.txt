changingColorTags	For Vim version 7.3	Last change: 2014 Oct 30

vim:tags=changingColorTags filetype=help autochdir scrolloff=3 foldcolumn=1

+-------------------+~
| The rgb parameter |~
+-------------------+~
the main guts is the R,G,B parameter.  The calling end tries to set colours it
wants for the elements, and the role of this function is to adjust the desired
R,G, and B that the final R,G,B setting ends up visibleon the screen.  Note
each R,G,B parameter is sent individually and really is more looked at as a
brightness not so much as a colour.  Colour is done at the function calling
end, and what the function does is modify it a little.  It does this taking
into account these parameters: |actBgr|, |dngBgr|, |senDar|, |senLig|.

+--------+--------------------------+~
| senDar | SENitivity |TO| DARkness |~
+--------+--------------------------+~
this parameter could be anything between *0* - *86399* . At *86399* it means
sensitive to everything.  The key to this is |hourScale|.  See also |dngBgr|.
|senDar| specifies the thickness amount relative to |dngBgr|.  This is in
relation to |ramps|.  The higher it is the more artificial compensation is done
to maintain visibility.

Putting *10000* , *12000* 

means something like *13* - *16* % grey offset towards black from |dngBgr| so
if background is within

*13* - *16* % of |dngBgr| compensation will be applied.

+--------+---------------------------+~
| senLig | SENitivity |TO| LIGhtness | ~
+--------+---------------------------+~
same as |senDar| but from the light end not the dark end.  If you're wondering
what I mean the whole thing is based on a smoothly brightening background, and
points within that brightness have to be defined to prevent clashes ocurring.
See |shading| and |ramps|.  See also |senDar|.

+--------+~
| dngBgr |~
+--------+~
is the specific shade *0* - *86399* that makes the text hard to read, as
determined by naked eye looking at it how easy it is to read on various
backgrounds right across the *0* - *86399* sphere.  E.g. let's say I found
this item hard to read at *21000* .  That is around *26* - *28* % in the
background grey.  This might be because a text is quite dark color anyway,
maybe a dark red or something.  Let's say I found particular text hard to read
at around *70000* or around *85* % mark.  This might be quite a bright letter,
maybe a pink or similar, where the background is tending to be light as well.

+-----------+~
| hourScale |~
+-----------+~
The basic thing this plugin does is constantly force the background to change
progressing the shade but doing it in such a way so as the |syntax| elements
and the |shading| do not clash and hence cause interfere with the display of
code.  The |hourScale| and |shading| in reality are the same because depending
on what point of the hour you are at the shading should be a certain shade.

from *0* % to *100* %, or black - white

that the script has reached.  Conveniently it is mapped to an hour so it
appears to progress, although you see it as two hours squeezed into one |more|
on that later. 

+----------------------------------------+~
| squeezing the hour into two half hours |~
+----------------------------------------+~
To make things useful I thought I'd just take a "second" hour and "press it"
into a second half of the hour, with the first hour being pressed into the
first half hour with the second hour reversed so that the |shading| appears to
be smoothly going up then down.  But note as far as all the shading of
|syntax| elements and the |background| is concerned internally there *is* only
one hour, *0* to *86399* .  It does not affect the way |syntax| elements are
colored inside.  I just did some creative arithmetic to squeeze the first and
second hour into one hour 1st half, 2nd half respectively but reversing the
|shading| so that it appears smooth.

+--------+-----------------------------------------------------------+~
| actBgr | continually updating background, gets lighter and lighter |~
+--------+-----------------------------------------------------------+~
See also |hourScale|.  |actBgr| is just the amount of shading we've progressed
the background to change to a lighter color, *0* - *86399* with *0* = black
and *86399* = white.  This |actBgr| gets updated at regular intervals by a
timer callback function around every *20* *seconds* so it regularly  gets a
slight increase.  The amount of increase depends on the amount of progress
made throughout the hour, so it relates to some useful information.  I.e how
many minutes into the hour we are in.  Actually it's a bit more than that as
two hours are fooled into being two half hours, see |this|.

+------------------------------------------+~
| the idea of shade to illustrate progress |~
+------------------------------------------+~
The whole idea is to achieve a sense of smooth continuum of color changing of
the background so as you sit and stare your code so it appears to be
"brightening up" ever lighter.  E.g. say when you're looking outside your
window you see a row of buildings and you're watching as the sun comes up.  I
mean it's not quite *NVidia's* *16* *x* *anisostropic* *anti-aliasing* with *realtime*
*shadows* in *60* *f.p.s* but I thought it would pretty it up.  I mean if NVidia
could make code look as pretty as it does it's 3D I quite happy to sit here
and "I'm not worthy" for as long as they like.  I'll even go on YouTube..

The main parameter of this is that of |actBgr| which starts at *0* and is
updated automatically to *86399* .  At the same time all the syntax elements
are updated with a shade based on this percentage ( *0* - *86399* ).

This would be brilliant apart from a certain |shading| of |actBgr| are going
to make syntax elements useless as they are too hard to see.

Remember also that |they|, the |syntax| elements are also being "progressed" so
you can see there is really quite a lot going on.  So to try to keep all this
under control the |actBgr| and |dngBgr| were introduced.  Related to this are
|senDar| and |senLig|.  Basically they help create little color ramps to allow
them to jump "over one another" to avoid clash.

+------------------+~
| visibility ramps |~
+------------------+~
The problem is that |actBgr| while it does make a great job of smoothly moving
a lighter and lighter shades of background, it gets such a lot of tiny little
shades in that it makes the text very difficult to see.  This is where
visibility |ramps| come in.  Basically |ramps| allow you to specify a certain
amount to be added to each *R,G,B* element of the syntax highlight to stop it
becoming invisible by the oncoming |actBgr| which eventually covers all the
shades from *black* to *white* .  I sat there and studied how hard they became
to read as the |actBgr| moved along and set |dngBgr| appropriately and set up
ramps so they wouldn't clash.  |dngBgr|, |senDar| and |senLig| are the main
ones I used.  These model the |ramps|.  It's not that sophisticated yet works
extremely well.  The other parameters you might see like *loadj* , *hiadj*
are just hints to the *RgbXxxxx()* function(s) on how to change, or |ramp| the
colour's *RGB* settings, each one treated singly, litereally *R* , *G* , and
then *B* .  That's why the |Rgb| parameter is only one integer.

+----------------------------------------------+~
| low adjustment peppering, seasoning to taste |~
+----------------------------------------------+~
I know this is starting to sound funky, but I wanted to get through a flavour
of what it was rather than appear too technical, because it's not really
clever... no really it's just the flavouring done to the colour when it's
close to that of |dngBgr|.  This is at the low end, that is the dark color
end.  The hiadj is just the same done at the bright end.  

Basically when |actBgr| is close or at |dngBgr| remembering that |actBgr| is a
forced continuation bright |shading| that goes on over time, exactly how close
is determined by |senDar| or |senLig| in the |hiadj| case, then this is the
amount of flavouring that is done to bring out the color a bit more to keep it
visible.  See?  Simple really.

+-----------------------------------------------+~
| high adjustment peppering, seasoning to taste |~
+-----------------------------------------------+~
Just the same as |loadj| but for the bright part.

+---------------------+~
| The syntax elements |~
+---------------------+~
The syntax elements in VIM are all updated dynamically throughout the
|hourScale| by the script.  As far as I know everything is included.  The good
thing is that the syntax elements remain quite constant, no matter what
language you're using.  This is what makes this script work for languages as
diverse as PHP, AutoIT, ActionScript, JavaScript and still works.  Syntax
elements can all be listed with: >
	:highlight   
<
As you can see there's quite a few.  The main ones are: *Normal* , *Comment* ,
*Statement* , *Constant* , *Special* , *Identifier* , and *Type* and I think
there's a few others but these are important.  

